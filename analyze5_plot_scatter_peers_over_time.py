#!/usr/bin/python
'''

'''
import sys, time, getopt, urllib, random, struct, commands, os, string, numpy, datetime
import subprocess

from analyze0_main import *


def print_usage():
	print " Scatter Plot of Peers "
	print ""
	print "USAGE: [OPTIONS] file_name_1 file_name_2 ... "
	print "\nOptions:"
	print "-h --help show this usage help message"
	print "-d --debug show some debug messages"
	print ""


def plot_header():
	return "# File generated by %s on %s" % (os.path.basename(__file__), datetime.datetime.now())


if __name__ == '__main__':

	# HEADER
	print "\n"
	script_name = os.path.basename(__file__)
	print script_name.upper()
	print "-" * len(script_name)

	# INITIALIZE VARIABLES
	debug = False
	file_name_input = ""
	outputFileName = ""
	count = 1

	try:
		optlist, args = getopt.gnu_getopt(sys.argv[count:], 'hdt:', ['--help', '--debug'])
		for o, a in optlist:
			if o in ["-h", "--help"]:
				print_usage()
				sys.exit(0)

			elif o in ["-d", "--debug"]:
				count += 1
				debug = True

	except getopt.GetoptError, e:
		print "Exception:", e
		print "Please, use -h or --help for instructions on how to use this script."
		sys.exit(-1)

	print ""
	print "OPTIONS"
	print "-------"
	print "\tDebug  :", debug
	print ""
	print "INPUT"
	print "-----"
	print "\tFiles:", sys.argv[count:]
	print ""
	print "MAKING DIRS"
	print "-----------"
	dir_data = Dirs().plots + "02_scatter/00_data/"
	dir_plot = Dirs().plots + "02_scatter/01_plot/"
	dir_eps = Dirs().plots + "02_scatter/02_eps/"
	dir_png = Dirs().plots + "02_scatter/03_png/"

	for dir in [dir_plot, dir_eps, dir_data, dir_png]:
		cmd = "mkdir -p " + dir
		run_cmd(cmd, 1, True)

	print "PLOTTING"
	print "--------"

	x_begin = 0
	x_end = 2000
	y_begin = 0
	y_end = 10

	count_file = 1
	for file_name_input in sys.argv[count:]:
		header = "FILE (%d/%d)" %(count_file, len(sys.argv[count:]))
		print "\t%s"% header
		print "\t%s" % ("-"*len(header))
		count_file += 1
		print ""
		#file_name_base = file_name_input.split(".txt")[0]
		print "\t\tfile_name_input        :", file_name_input,

		if not os.path.isfile(file_name_input):
			print "[ERROR]"
			print ""
			print "\t\tFILE NOT FOUND!        :", file_name_input
			print "\n\n"
		else:
			print "[OK]"
			file_name_base = os.path.basename(file_name_input)
			print "\t\tfile_name_base         :", file_name_base
			file_data_name = "%s%s.txt" % (dir_data, file_name_base)
			print "\t\tfile_data_name         :", file_data_name
			file_name_plot = "%s%s.plot" % (dir_plot, file_name_base)
			print "\t\tfile_name_plot         :", file_name_plot
			file_name_eps = "%s%s.eps" % (dir_eps, file_name_base)
			print "\t\tfile_name_eps          :", file_name_eps
			file_name_png = "%s%s.png" % (dir_png, file_name_base)
			print "\t\tfile_name_png          :", file_name_png
			print ""
			# window time_min IP:port peerId
			cmd = "cat %s | cut -d ' ' -f 1,4 | sort -u > %s" % (file_name_input, file_data_name)
			run_cmd(cmd, 2, True)
			cmd = 'head -n 2 %s | grep -v "#"' % file_name_input
			cmd_out = commands.getoutput(cmd).split("\t")

			plot = plot_header()
			plot += '''
unset grid
unset key
set xlabel "Sampling No."
set ylabel "Peer IP (anonymized)"

set xrange [0:]
set yrange [0:]

set term postscript eps enhanced color "Helvetica" 24 lw 2
set output "%s"

plot '%s' using 1:2 title "sampling" with points lc 1 pt 1 ps 1
			''' % (file_name_eps, file_data_name)

			plot += "\n"
			plot += 'set output "%s"\n' % file_name_png
			plot += "set term png\n"
			plot += "replot\n"

			file_plot = open(file_name_plot, 'w', 1)
			file_plot.write(plot)
			file_plot.close()

			cmd = "gnuplot %s" % file_name_plot
			run_cmd(cmd, 2, True)

	print ""
	print "%s %s finished!" % (now_str(), script_name)
	print ""